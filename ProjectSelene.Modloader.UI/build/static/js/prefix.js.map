{
  "version": 3,
  "sources": ["../../../../ProjectSelene.Modloader/src/prefix/prefix.ts"],
  "sourcesContent": ["function __injectClass<T extends Record<string, unknown>>(name: string, clazz: new (...args: unknown[]) => T) {\r\n\t//set class instance name (makes things a lot easier to debug)\r\n\tconst result = { [name]: class extends clazz {} }[name];\r\n\t//static members\r\n\tfor (const [name, desc] of Object.entries(Object.getOwnPropertyDescriptors(clazz))) {\r\n\t\tif (!['name', 'length', 'prototype'].includes(name)) {\r\n\t\t\tObject.defineProperty(result, name, desc);\r\n\t\t}\r\n\t}\r\n\t//constructor name\r\n\tObject.defineProperty(result, 'name', { configurable: true, value: name });\r\n\tclazz = result;\r\n\r\n\t__projectSelene.classes[name] = clazz;\r\n\treturn clazz;\r\n}\r\n\r\nfunction __injectFunction(name: string, value: (...args: unknown[]) => unknown) {\r\n\tif (name === 'startGame') {\r\n\t\t__projectSelene.functions[name] = value;\r\n\t\treturn __projectSelene.gameReadyCallback;\r\n\t}\r\n\r\n\t__projectSelene.functions[name] = value;\r\n\treturn value;\r\n}\r\n\r\nfunction __injectConst(name: string, value: unknown) {\r\n\tif (name === 'tmp') {\r\n\t\treturn value;\r\n\t}\r\n\t__projectSelene.consts[name] = value;\r\n\treturn value;\r\n}\r\n\r\nfunction __injectLet(name: string, getter: () => unknown, setter: (value: unknown) => void) {\r\n\tif (name === 'tmp') {\r\n\t\treturn;\r\n\t}\r\n\tif (name in __projectSelene.lets) {\r\n\t\tconsole.warn('duplicate let', name);\r\n\t}\r\n\t__projectSelene.lets[name] = { getter, setter };\r\n}\r\n\r\nfunction __injectEnum(name: string, enumValue: Record<string, number>) {\r\n\tif (name === 'tmp') {\r\n\t\treturn;\r\n\t}\r\n\tif (name in __projectSelene.enums) {\r\n\t\tconsole.warn('duplicate enum', name);\r\n\t}\r\n\t__projectSelene.enums[name] = enumValue;\r\n}\r\n\r\nObject.assign(window, {\r\n\t__injectClass,\r\n\t__injectFunction,\r\n\t__injectConst,\r\n\t__injectLet,\r\n\t__injectEnum,\r\n});\r\n\r\nexport {};\r\n"],
  "mappings": "AAAA,SAASA,EAAiDC,EAAcC,EAAoC,CAE3G,IAAMC,EAAS,CAAE,CAACF,CAAI,EAAG,cAAcC,CAAK,EAAG,EAAGD,CAAI,EAEtD,OAAW,CAACA,EAAMG,CAAI,IAAK,OAAO,QAAQ,OAAO,0BAA0BF,CAAK,CAAC,EAC3E,CAAC,OAAQ,SAAU,WAAW,EAAE,SAASD,CAAI,GACjD,OAAO,eAAeE,EAAQF,EAAMG,CAAI,EAI1C,cAAO,eAAeD,EAAQ,OAAQ,CAAE,aAAc,GAAM,MAAOF,CAAI,CAAE,EACzEC,EAAQC,EAER,gBAAgB,QAAQF,CAAI,EAAIC,EACzBA,CACR,CAEA,SAASG,EAAiBJ,EAAcK,EAAsC,CAC7E,OAAIL,IAAS,aACZ,gBAAgB,UAAUA,CAAI,EAAIK,EAC3B,gBAAgB,oBAGxB,gBAAgB,UAAUL,CAAI,EAAIK,EAC3BA,EACR,CAEA,SAASC,EAAcN,EAAcK,EAAc,CAClD,OAAIL,IAAS,QAGb,gBAAgB,OAAOA,CAAI,EAAIK,GACxBA,CACR,CAEA,SAASE,EAAYP,EAAcQ,EAAuBC,EAAgC,CACrFT,IAAS,QAGTA,KAAQ,gBAAgB,MAC3B,QAAQ,KAAK,gBAAiBA,CAAI,EAEnC,gBAAgB,KAAKA,CAAI,EAAI,CAAE,OAAAQ,EAAQ,OAAAC,CAAM,EAC9C,CAEA,SAASC,EAAaV,EAAcW,EAAiC,CAChEX,IAAS,QAGTA,KAAQ,gBAAgB,OAC3B,QAAQ,KAAK,iBAAkBA,CAAI,EAEpC,gBAAgB,MAAMA,CAAI,EAAIW,EAC/B,CAEA,OAAO,OAAO,OAAQ,CACrB,cAAAZ,EACA,iBAAAK,EACA,cAAAE,EACA,YAAAC,EACA,aAAAG,EACA",
  "names": ["__injectClass", "name", "clazz", "result", "desc", "__injectFunction", "value", "__injectConst", "__injectLet", "getter", "setter", "__injectEnum", "enumValue"]
}
